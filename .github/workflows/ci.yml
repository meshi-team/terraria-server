name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - edited

jobs:
  # Check if the PR title is valid.
  # A valid title is in the format "<type>(<scope>): <subject>".
  # -> Fails if the title is invalid.
  validate-pr-title:
    name: Validate PR title
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      (
        github.event.action == 'opened' ||
        github.event.action == 'reopened' ||
        github.event.action == 'edited'
      )
    permissions:
      contents: read
    steps:
      # This step is done so that the GitHub App (meshi-team-bot)
      # is the author of the PR error comment.
      - name: Create meshi-team-bot[bot] token
        uses: actions/create-github-app-token@v1
        id: token
        with:
          app-id: ${{ vars.MESHI_TEAM_BOT_APP_ID }}
          private-key: ${{ secrets.MESHI_TEAM_BOT_PRIVATE_KEY }}

      - name: Validate PR title
        id: validate
        continue-on-error: true
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        with:
          types: |
            feat
            fix
            refactor
            revert
            chore
            ci
            docs
          requireScope: false
          subjectPattern: ^[a-z].+$

      - name: Add PR comment with error message
        if: ${{ steps.validate.outputs.error_message != null }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          header: validate-pr-title
          recreate: true
          message: |
            PR title must be in the format `<type>(<scope>): <subject>`.

            - Valid types are: `feat`, `fix`, `refactor`, `revert`, `chore`, `ci`, `docs`.
            - The scope is optional.
            - The subject must start with a lowercase letter.

            Change the PR title accordingly.

            Details:

            ```
            ${{ steps.validate.outputs.error_message }}
            ```

      - name: Delete PR comment
        if: ${{ steps.validate.outputs.error_message == null }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          header: validate-pr-title
          delete: true

  # Check if Terraform files have been modified.
  # The output "changed" can be used to check if there are any changes.
  # -> changed: 'true' if there are changes, 'false' otherwise.
  tf-files-changed:
    name: Terraform files changed
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.any_modified }}
    permissions:
      contents: read
    steps:
      - name: Checkout code (on push)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Checkout code (on pull request)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check files for changes
        id: check
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/*.tf
            **/*.hcl

  # Run terraform fmt on the Terraform files.
  # -> Fails if there are any formatting issues.
  tf-fmt:
    name: Terraform format check
    runs-on: ubuntu-latest
    needs:
      - tf-files-changed
    if: ${{ needs.tf-files-changed.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform fmt
        shell: bash
        working-directory: ./infrastructure
        run: terraform fmt -check -recursive -diff -no-color

  # Run terraform validate on the Terraform files.
  # -> Fails if there are any validation issues.
  tf-validate:
    name: Terraform validate
    runs-on: ubuntu-latest
    needs:
      - tf-files-changed
    if: ${{ needs.tf-files-changed.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform validate
        shell: bash
        working-directory: ./infrastructure
        run: terraform validate -no-color
